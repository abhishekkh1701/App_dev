import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<List<Album>> fetchAlbum() async {
  final response = await http
      .get(Uri.parse('https://jsonplaceholder.typicode.com/albums'));

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON array.
    List<dynamic> data = jsonDecode(response.body);
    List<Album> albums = data.map((json) {
      return Album.fromJson(json as Map<String, dynamic>);
    }).toList();
    return albums;
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load albums');
  }
}

Future<Album> createAlbum(String title) async {
  final response = await http.post(
    Uri.parse('https://jsonplaceholder.typicode.com/albums'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{
      'title': title,
    }),
  );

  if (response.statusCode == 201) {
    // If the server did return a 201 CREATED response,
    // then parse the JSON.
    print("Album has been created.");
    try {
      return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);
    } catch (e) {
      throw FormatException('Failed to create album: $e');
    }
  } else {
    // If the server did not return a 201 CREATED response,
    // then throw an exception.
    throw Exception('Failed to create album.');
  }
}



class Album {
  final int userId;
  final int id;
  final String title;

  const Album({
    required this.userId,
    required this.id,
    required this.title,
  });

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {
        'userId': int userId,
        'id': int id,
        'title': String title,
      } =>
        Album(
          userId: userId,
          id: id,
          title: title,
        ),
      _ => throw const FormatException('Failed to load album.'),
    };
  }
}

void main() => runApp(const MyApp());

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late Future<List<Album>> _futureAlbum;
  final TextEditingController _controller = TextEditingController();
  Future<Album>? _create1;

  @override
  void initState() {
    super.initState();
    _futureAlbum = fetchAlbum();
  }

  Future<List<Album>> deleteAlbum(String albumId) async {
    final response = await http.delete(
      Uri.parse('https://jsonplaceholder.typicode.com/albums/$albumId'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
    );

    if (response.statusCode == 200) {
      print('Album with ID $albumId deleted successfully');
      // Return the updated list of albums after deletion
      _futureAlbum = fetchAlbum();
      return _futureAlbum;
    } else {
      print('Failed to delete album with ID $albumId');
      // Throw an exception or handle the error as needed
      throw Exception('Failed to delete album with ID $albumId');
    }
  }
  
     @override


    Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fetch Data Example',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Fetch Data Example'),
        ),
      body: Container(
          alignment: Alignment.center,
          padding: const EdgeInsets.all(8),
          child: (_create1 == null) ? buildColumn() : buildFutureBuilder(),
        ),
        
      ),
      );
    
    
  }
  FutureBuilder<List<Album>> buildFutureBuilder() {
        return FutureBuilder<List<Album>>(
          future: _futureAlbum,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return CircularProgressIndicator();
            } else if (snapshot.hasError) {
              return Text('${snapshot.error}');
            } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return Text('No albums available.');
            } else {
              return Column(
                children: [
                
                  
                  Expanded(
                    child: ListView.builder(
                      itemCount: snapshot.data!.length,
                      itemBuilder: (context, index) {
                        Album album = snapshot.data![index];
                        return Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: ListTile(
                            title: Text(album.title),
                            subtitle: Text('ID : ${album.id}'),
                            tileColor: const Color.fromARGB(128, 124, 128, 56),
                            shape: RoundedRectangleBorder(
                              side: const BorderSide(
                                  color: Color.fromARGB(255, 30, 22, 138), width: 5),
                              borderRadius: BorderRadius.circular(5),
                            ),
                            trailing: IconButton(
                              icon: const Icon(Icons.delete),
                              onPressed: () {
                                setState(() {
                                  // Call the onDelete callback when the delete icon is pressed
                                  _futureAlbum = deleteAlbum(album.id.toString());
                                });
                              },
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              );
            }
          },
        );
        }
    Column buildColumn() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        TextField(
          controller: _controller,
          decoration: const InputDecoration(hintText: 'Enter Title'),
        ),
        ElevatedButton(
          onPressed: () {
            setState(() {
              _create1 = createAlbum(_controller.text);
            });
          },
          child: const Text('Create Data'),
        ),
         
      ],
    );
  }
}  
